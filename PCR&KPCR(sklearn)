import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
import sklearn.decomposition as sk_decomposition
import sklearn.linear_model as sk_linear
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from sklearn.decomposition import KernelPCA
import xlrd


####Excel表格读取方式1：利用xlrd##########
# Dataset = xlrd.open_workbook('C:\\Users\\Lenovo\\Desktop\\科研相关\\OASAE（matlab）\\DeepLearnToolbox-SAE\\data\\数据集\\加氢裂化数据集\\重石脑油\\重石脑油初馏点.xlsx'
#                             );
#
# #names=Dataset.sheet_names(); #获取所有工作表名称
# worksheet=Dataset.sheet_by_index(0); #通过索引获得sheet对象,还可以通过名称等获取。参考网址：https://blog.csdn.net/sinat_28576553/article/details/81275650
#
# nrows = worksheet.nrows;  #获取表的总行数
# ncols = worksheet.ncols;  #获取表的总列数,数据集大小为：1306x45
######################################

#######方式2：利用pandas，参考网址：https://blog.csdn.net/liuyq859/article/details/78387600#################
df = pd.read_excel('C:\\Users\\Lenovo\\Desktop\\科研相关\\OASAE（matlab）\\DeepLearnToolbox-SAE\\data\\数据集\\加氢裂化数据集\\重石脑油\\重石脑油初馏点.xlsx'
                   ,encording='utf-8',sep='\t');
# print(df.dtypes);#查看数据类型
# print(df.shape);#查看数据大小，（1305 ，44）
Xdata = df.iloc[:,:43].values     #(1305,43)
Ydata = df.iloc[:,43:44].values   #(1305,1)
ss = StandardScaler()
Xdata = ss.fit_transform(Xdata)
Ydata = ss.fit_transform(Ydata) #对数据进行标准化处理


##########划分训练集，测试集#################
Xtrain = Xdata[:900,:]
Ytrain = Ydata[:900,:]

Xtest  = Xdata[905:,:]
Ytest  = Ydata[905:,:]

train_number = Xtrain.shape[0]      #900
test_number  = Xtest.shape[0]       #400

##########PCA建模,参考网址：https://zhuanlan.zhihu.com/p/105041301##########################
Xtrain_pca = ss.fit_transform(Xtrain)
Xtest_pca = ss.fit_transform(Xtest)
Ytrain_pca = ss.fit_transform(Ytrain)
Ytest_pca = ss.fit_transform(Ytest)
pca = sk_decomposition.PCA(n_components=16,whiten=False,svd_solver='auto')
pca.fit(Xtrain_pca)
reduced_X = pca.transform(Xtrain_pca) #reduced_X为降维后的数据
reduced_X_test = pca.transform(Xtest_pca) #reduced_X为降维后的数据
# print('PCA:')
# print ('降维后的各主成分的方差值占总方差值的比例',pca.explained_variance_ratio_)
# print ('降维后的各主成分的方差值',pca.explained_variance_)
# print ('降维后的特征数',pca.n_components_)
model = sk_linear.LinearRegression(fit_intercept=True,normalize=False,copy_X=True,n_jobs=1)
model.fit(reduced_X,Ytrain_pca)
Y_pred = model.predict(reduced_X_test)
RMSE_PCA = np.sqrt(mean_squared_error(Ytest_pca,Y_pred))
R2_PCA =  r2_score(Ytest_pca,Y_pred)
print('PCR:')
print('RMSE:',RMSE_PCA) #输出截距
print('R2:',R2_PCA) #输出系数
n = np.arange(0,len(Xtest_pca),1)
fig1 = plt.figure(1)
plt.plot(n, Ytest, color="r", linestyle="-", marker="o", markersize=0.8,linewidth=1.1, label="y_test")
plt.plot(n, Y_pred, color="b", linestyle="-", marker="o", markersize=0.8,linewidth=1.1, label="y_pred")
plt.legend(loc='upper left', bbox_to_anchor=(0.2, 0.95))
plt.xlabel("x")
plt.ylabel("y")
plt.draw()
plt.pause(4)# 间隔的秒数： 4s
plt.close(fig1)

##########KPCA建模，参考网址：https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html#########

kpca=KernelPCA(n_components=16,kernel='rbf',gamma=0.00078)
kpca.fit(Xtrain_pca)#映射
reduced_X_KPCA = kpca.transform(Xtrain_pca)#映射
reduced_X_KPCA_test = kpca.transform(Xtest_pca)

model = sk_linear.LinearRegression(fit_intercept=True,normalize=False,copy_X=True,n_jobs=1)
model.fit(reduced_X_KPCA,Ytrain_pca)
Y_pred = model.predict(reduced_X_KPCA_test)
RMSE_KPCA = np.sqrt(mean_squared_error(Ytest_pca,Y_pred))
R2_KPCA =  r2_score(Ytest_pca,Y_pred)
print('KPCR:')
print('RMSE:',RMSE_KPCA) #输出截距
print('R2:',R2_KPCA) #输出系数
n = np.arange(0,len(Xtest_pca),1)
fig2 = plt.figure(2)
plt.plot(n, Ytest, color="r", linestyle="-", marker="o", markersize=0.8,linewidth=1.1, label="y_test")
plt.plot(n, Y_pred, color="b", linestyle="-", marker="o", markersize=0.8,linewidth=1.1, label="y_pred")
plt.legend(loc='upper left', bbox_to_anchor=(0.2, 0.95))
plt.xlabel("x")
plt.ylabel("y")
plt.draw()
plt.pause(4)# 间隔的秒数： 4s
plt.close(fig2)
